#!/usr/bin/python3
"""
'test_base_model' is the unit test for /models/base_model.py
"""
import unittest
from modules import base_model


class TestBaseModel(unittest.TestCase):
    """Collection of test methods for the base model module.

    Parent Class:
        TestCase: Provides methods for assertion and testing.
    """

    def setUp(self):
        """Methods that runs before each individual test."""
        obj = BaseModel()

    def test_Object_Attr(self):
        """Runs tests on Instance Attributes of BaseModel"""
        self.assertIsInstance(obj.id, uuid)
        self.assertIsInstance(obj.created_at, datetime)
        self.assertIsInstance(obj.updated_at, datetime)

    def test_str(self):
        """Assert compliances of 'dunder str' representation"""
        str_list = str(obj).split()
        my_list = [f"[{self.__class_.__name__}]", f"({self.id})", f"{self.__dict__}"]
        count = 0
        for element in my_list:
            self.assertEqual(element, str_list[count])
            count += 1

    def test_save(self):
        """Confirms that saving action is done sucessffully."""
        before = obj.updated_at
        after = obj.save()
        self.assertNotEqual(before, after)

    def test_to_dict(self):
        """Tests the conversion tool 'to_dict'."""
        dct = obj.to_dict()
        my_dict = 


if __name__ == "__main__":
    unittest.main()
